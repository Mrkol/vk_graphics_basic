#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require



layout (local_size_x = 256) in;

struct Particle
{
	vec4 posAndSize;
	vec4 velAndLife;
};


layout(std430, binding = 0) buffer Pos 
{
   Particle particles[];
};

layout (binding = 1) uniform UBO 
{
	float deltaT;
	uint particleCount;
} ubo;


float rand(float n) { return 2*fract(sin(n) * 43758.5453123) - 1; }

void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ubo.particleCount) 
		return;	

    // Read position and velocity
    vec3 wPos = particles[index].posAndSize.xyz;
    vec3 wVel = particles[index].velAndLife.xyz;
    float lifetime = particles[index].velAndLife.w;

    lifetime -= ubo.deltaT;

    if (lifetime < 0)
    {
        wPos =  vec3(0);
        wVel = vec3(rand(index)/2.f, 1.5f, rand(index*index)/2.f);
        lifetime = 1.f + rand(index)/4.f;
    }
    else
    {
        wPos += wVel * ubo.deltaT;
    }

    
    // Write back
    particles[index].posAndSize.xyz = wPos;
    particles[index].posAndSize.w = 0.1f;
    particles[index].velAndLife.xyz = wVel;
    particles[index].velAndLife.w = lifetime;
}
